{"ast":null,"code":"var _jsxFileName = \"D:\\\\PracticeProject\\\\Redux Project\\\\learn-redux\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux'; //STORE -- A globalized state , holds all the data for the appliction \n//Created just after 'counter' Reducer\n//let store = createStore(counter);\n//ACTION -- Describes what we want to do(will build a counter),Increment is the action\n\nconst increment = () => {\n  return {\n    action: 'INCREMENT'\n  };\n};\n\nconst decrement = () => {\n  return {\n    action: 'DECREMENT'\n  };\n}; //REDUCER -- It checks which action is called and then this modifies the Store above.\n\n\nconst counter = (state = 0, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n\n    case 'DECREMENT':\n      return state - 1;\n  }\n};\n\nlet store = createStore(counter); //Display in the console\n\nstore.subscribe(() => {\n  console.log('The state of counter is ', store.getState());\n}); //DISPATCH -- Hey Dispatch this ACTION to the REDUCER\n\nstore.dispatch(increment()); //So it is like DISPATCH --> ACTION --> REDUCER --> STORE\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 52\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["D:\\PracticeProject\\Redux Project\\learn-redux\\src\\index.js"],"names":["React","ReactDOM","App","serviceWorker","createStore","increment","action","decrement","counter","state","type","store","subscribe","console","log","getState","dispatch","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAAQC,WAAR,QAA0B,OAA1B,C,CAEA;AACA;AACA;AAEA;;AACA,MAAMC,SAAS,GAAG,MAAI;AAClB,SAAM;AACFC,IAAAA,MAAM,EAAE;AADN,GAAN;AAGH,CAJD;;AAMA,MAAMC,SAAS,GAAG,MAAI;AAClB,SAAM;AACFD,IAAAA,MAAM,EAAE;AADN,GAAN;AAGH,CAJD,C,CAMA;;;AACA,MAAME,OAAO,GAAG,CAACC,KAAK,GAAG,CAAT,EAAYH,MAAZ,KAAqB;AAEjC,UAAOA,MAAM,CAACI,IAAd;AACI,SAAK,WAAL;AACQ,aAAOD,KAAK,GAAG,CAAf;;AACR,SAAK,WAAL;AACQ,aAAOA,KAAK,GAAG,CAAf;AAJZ;AAOH,CATD;;AAWA,IAAIE,KAAK,GAAGP,WAAW,CAACI,OAAD,CAAvB,C,CAEA;;AACAG,KAAK,CAACC,SAAN,CAAgB,MAAI;AAChBC,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAuCH,KAAK,CAACI,QAAN,EAAvC;AACH,CAFD,E,CAIA;;AACAJ,KAAK,CAACK,QAAN,CAAeX,SAAS,EAAxB,E,CAIA;;AAGAJ,QAAQ,CAACgB,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,E,CAEA;AACA;AACA;;AACAhB,aAAa,CAACiB,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\n\n//STORE -- A globalized state , holds all the data for the appliction \n//Created just after 'counter' Reducer\n//let store = createStore(counter);\n\n//ACTION -- Describes what we want to do(will build a counter),Increment is the action\nconst increment = ()=>{\n    return{\n        action: 'INCREMENT'\n    }\n}\n\nconst decrement = ()=>{\n    return{\n        action: 'DECREMENT'\n    }\n}\n\n//REDUCER -- It checks which action is called and then this modifies the Store above.\nconst counter = (state = 0, action)=>{\n\n    switch(action.type){\n        case 'INCREMENT' : \n                return state + 1;\n        case 'DECREMENT' :\n                return state - 1;      \n    }\n  \n}\n\nlet store = createStore(counter);\n\n//Display in the console\nstore.subscribe(()=>{\n    console.log('The state of counter is ',store.getState())\n})\n\n//DISPATCH -- Hey Dispatch this ACTION to the REDUCER\nstore.dispatch(increment());\n\n\n\n//So it is like DISPATCH --> ACTION --> REDUCER --> STORE\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}